<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>希染</title>
  
  <subtitle>愿你走过半生，归来仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huangXin1538.github.io/"/>
  <updated>2019-04-02T08:27:16.294Z</updated>
  <id>http://huangXin1538.github.io/</id>
  
  <author>
    <name>希染</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js闭包</title>
    <link href="http://huangXin1538.github.io/2019/04/02/20190402-2/"/>
    <id>http://huangXin1538.github.io/2019/04/02/20190402-2/</id>
    <published>2019-04-02T08:26:57.000Z</published>
    <updated>2019-04-02T08:27:16.294Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js变量提升</title>
    <link href="http://huangXin1538.github.io/2019/04/02/20190402-1/"/>
    <id>http://huangXin1538.github.io/2019/04/02/20190402-1/</id>
    <published>2019-04-02T08:10:29.000Z</published>
    <updated>2019-04-02T08:23:41.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量进入作用域方式"><a href="#变量进入作用域方式" class="headerlink" title="变量进入作用域方式"></a>变量进入作用域方式</h2><p>1.语言内置：所有的作用域都有 this 和 arguments<br>2.形式参数：函数的形式参数会作为函数作用域的一部分<br>3.函数声明: function a(){}<br>4.变量声明：var a;</p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">test1();</span><br><span class="line">log依次为<span class="number">5</span>，<span class="literal">undefined</span>，<span class="number">10</span>；</span><br><span class="line"></span><br><span class="line">实际执行顺序</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量进入作用域方式&quot;&gt;&lt;a href=&quot;#变量进入作用域方式&quot; class=&quot;headerlink&quot; title=&quot;变量进入作用域方式&quot;&gt;&lt;/a&gt;变量进入作用域方式&lt;/h2&gt;&lt;p&gt;1.语言内置：所有的作用域都有 this 和 arguments&lt;br&gt;2.形式参数
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>html5调起摄像头拍照</title>
    <link href="http://huangXin1538.github.io/2019/03/29/20190329-1/"/>
    <id>http://huangXin1538.github.io/2019/03/29/20190329-1/</id>
    <published>2019-03-29T06:19:23.000Z</published>
    <updated>2019-03-29T06:26:09.817Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html部分</span></span><br><span class="line">&lt;video id=<span class="string">"video"</span> width=<span class="string">"480"</span> height=<span class="string">"320"</span> controls&gt;&lt;/video&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;button id=<span class="string">"capture"</span>&gt;拍照&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"480"</span> height=<span class="string">"320"</span>&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>);</span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">//访问用户媒体设备的兼容方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserMedia</span>(<span class="params">constraints, success, error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line">    <span class="comment">//最新的标准API</span></span><br><span class="line">    navigator.mediaDevices</span><br><span class="line">      .getUserMedia(constraints)</span><br><span class="line">      .then(success)</span><br><span class="line">      .catch(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia) &#123;</span><br><span class="line">    <span class="comment">//webkit核心浏览器</span></span><br><span class="line">    navigator.webkitGetUserMedia(constraints, success, error);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia) &#123;</span><br><span class="line">    <span class="comment">//firfox浏览器</span></span><br><span class="line">    navigator.mozGetUserMedia(constraints, success, error);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia) &#123;</span><br><span class="line">    <span class="comment">//旧版API</span></span><br><span class="line">    navigator.getUserMedia(constraints, success, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//兼容webkit核心浏览器</span></span><br><span class="line">  <span class="keyword">let</span> CompatibleURL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">  <span class="comment">//将视频流设置为video元素的源</span></span><br><span class="line">  <span class="built_in">console</span>.log(stream);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//video.src = CompatibleURL.createObjectURL(stream);</span></span><br><span class="line">  video.srcObject = stream;</span><br><span class="line">  video.play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`访问用户媒体设备失败<span class="subst">$&#123;error.name&#125;</span>, <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  navigator.mediaDevices.getUserMedia ||</span><br><span class="line">  navigator.getUserMedia ||</span><br><span class="line">  navigator.webkitGetUserMedia ||</span><br><span class="line">  navigator.mozGetUserMedia</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">//调用用户媒体设备, 访问摄像头</span></span><br><span class="line">  getUserMedia(&#123;<span class="attr">video</span>: &#123;<span class="attr">width</span>: <span class="number">480</span>, <span class="attr">height</span>: <span class="number">320</span>&#125;&#125;, success, error);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"不支持访问用户媒体"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击拍照</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'capture'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  context.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">320</span>);      </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="html5" scheme="http://huangXin1538.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>base64与file格式图片转换</title>
    <link href="http://huangXin1538.github.io/2019/03/26/20190326-1/"/>
    <id>http://huangXin1538.github.io/2019/03/26/20190326-1/</id>
    <published>2019-03-26T07:14:44.000Z</published>
    <updated>2019-03-29T03:55:43.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="base64转file"><a href="#base64转file" class="headerlink" title="base64转file"></a>base64转file</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl, filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//将base64转换为文件</span></span><br><span class="line">  <span class="keyword">var</span> arr = dataurl.split(<span class="string">","</span>),</span><br><span class="line">    mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">    bstr = atob(arr[<span class="number">1</span>]),</span><br><span class="line">    n = bstr.length,</span><br><span class="line">    u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], filename, &#123;</span><br><span class="line">    type: mime</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> file = dataURLtoFile(imgUrl, <span class="string">"img"</span>);</span><br></pre></td></tr></table></figure><h2 id="file转base64"><a href="#file转base64" class="headerlink" title="file转base64"></a>file转base64</h2><p>base64转blob,blob转file<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoBlob</span> (<span class="params">dataurl</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>),</span><br><span class="line">      mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">      bstr = atob(arr[<span class="number">1</span>]),</span><br><span class="line">      n = bstr.length,</span><br><span class="line">      u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">      u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123; <span class="attr">type</span>: mime &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="comment">//将blob转换为file</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blobToFile</span>:(<span class="params">theBlob, fileName</span>)</span>&#123;</span><br><span class="line">  theBlob.lastModifiedDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  theBlob.name = fileName;</span><br><span class="line">  <span class="keyword">return</span> theBlob;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">var</span> blob = dataURLtoBlob(base64Data);</span><br><span class="line"><span class="keyword">var</span> file = blobToFile(blob, imgName);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;base64转file&quot;&gt;&lt;a href=&quot;#base64转file&quot; class=&quot;headerlink&quot; title=&quot;base64转file&quot;&gt;&lt;/a&gt;base64转file&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>export 和 module export</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-6/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-6/</id>
    <published>2019-03-15T07:50:18.000Z</published>
    <updated>2019-03-15T07:50:38.241Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>async await</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-5/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-5/</id>
    <published>2019-03-15T07:32:56.000Z</published>
    <updated>2019-03-15T07:33:17.336Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js es6" scheme="http://huangXin1538.github.io/tags/js-es6/"/>
    
  </entry>
  
  <entry>
    <title>js作用域详解</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-4/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-4/</id>
    <published>2019-03-15T01:45:23.000Z</published>
    <updated>2019-04-02T08:05:50.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>js中全局作用域比较简单，在代码任何地方都有定义。<br>函数的参数和局部变量只在函数内有定义。<br>局部变量优先级高于同名全局变量，当局部变量和全局变量同名，局部变量覆盖全局变量</p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>在变量声明的代码段之外没有定义，成为块级作用域。<br>js中使用的是函数作用域（变量在声明他们的函数体以及这个函数体嵌套的任何函数体都是有定义的）</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>js中函数也是对象，一切都是对象。函数拥有可以通过代码访问的属性和一系列仅供js引擎访问的内部属性。<br>其中一个内部属性是[[scope]]。该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问<br>函数被创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。</p><p>执行函数时，会创建一个称为‘运行期上下文’的内部对象，运行期上下文定义了函数执行的环境。每个运行期上下文都有自己的作用域链，用于标识符解析。<br>当运行期上下文被创建时，它的作用域链接初始化为当前运行函数的[[scope]]所包含的对象。</p><p>这些值，按照出现在函数中的顺序被复制到运行期上下文的作用域中。它们共同组成一个新的对象，叫做‘活动对象’。该对象包含了函数的所有的局部变量，命名参数、参数集合以及this，然后此对象被推入作用域链的前端，当运行期上下文被销毁时，活动对象也随之销毁</p><h2 id="函数解析和执行过程"><a href="#函数解析和执行过程" class="headerlink" title="函数解析和执行过程"></a>函数解析和执行过程</h2><p>a();</p><p>解析：<br>1.代码进入浏览器，因为会有标识符解析，所以在这之前，js解释器需要扫面全局，初始化全局作用域。<br>2.a变量进入全局作用域，a仍是undefined，当解释器自上而下解释到这段代码时,创建一个匿名函数<br>3.将全局作用域压进函数对象的内部属性 所引用的作用域链里[[scope]]<br>4.将匿名对象赋值给a</p><p>执行<br>1.创建内部对象，称为该对象的‘执行期上下文’。定义了一个函数的执行环境，函数每次执行都会创建独一无二的执行期上下文，每个执行期上下文都有自己的作用域链，用来解析标识符。<br>2.当执行期上下文创建时，它的作用域链会被初始化为当前执行的函数对象里的[[scope]]属性中包含的对象<br>3.scope中的值，按照它们原有的顺序被复制到执行期上下文的作用链里<br>4.解析器创建一个称为‘活动对象’的内部对象，活动对象包含当前执行函数里所有的局部变量，命名参数，参数合计以及this。<br>5.活动对象被推入执行期上下文里中作用域链的前端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h2&gt;&lt;p&gt;js中全局作用域比较简单，在代码任何地方都有定义。&lt;br&gt;函数的参数和局部变量只在函数内有定义。&lt;br&gt;局部变量优先
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css 三栏布局以及延伸</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-3/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-3/</id>
    <published>2019-03-15T01:44:33.000Z</published>
    <updated>2019-03-15T01:44:58.935Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css 边距重叠 与 BFC</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-2/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-2/</id>
    <published>2019-03-15T01:43:47.000Z</published>
    <updated>2019-03-15T01:44:16.580Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>call和apply</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-1/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-1/</id>
    <published>2019-03-15T01:42:52.000Z</published>
    <updated>2019-03-29T07:06:34.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>每个Function对象，都带有一个apply()和call()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">apply</span>(<span class="params">thisObj[, argArray]</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span>.<span class="title">call</span>(<span class="params">thisObj[, arg1[, arg2[, [,...argN]]]]</span>);</span></span><br></pre></td></tr></table></figure><p>apply() :调用一个对象的一个方法，用另一个对象替换当前对象。例如，B.apply(A, arguments);</p><p>即A对象应用B对象的方法</p><p>call() : 调用一个对象的一个方法，用另一个对象替换当前对象。 例如，B.call(A, arg1, arg2);</p><p>即A对象调用B对象的方法</p><p>共同之处：都可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为有thisObj指定的新对象。</p><p>不同之处：</p><p>apply：最多只能有两个参数 新this对象和一个数组argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里。如果argArray不是一个有效的数组或arguments对象，那么将导致一个TypeRrror。如果没有提供argArray和thisObj任何一个参数，那么Global对象将被作为thisObj，并且无法传递任何参数</p><p>call： 可以接受多个参数，第一个参数和apply一样，后面是一串参数列表；主要用在js对象各方法互相调用的时候，使当前this指针保持一致，或者在特殊情况下需要改变this指针。如果没有提供thisObj参数，那么Golbal对象被用作thisObj。</p><p>实际上，apply和call功能一样，只是传入的参数列表形式不同。</p><h2 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h2><h3 id="普通继承"><a href="#普通继承" class="headerlink" title="普通继承"></a>普通继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.apply(<span class="keyword">this</span>,[name]);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"咕咕"</span>);</span><br><span class="line">cat.showName();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*call的用法*/</span></span><br><span class="line">Animal.call(<span class="keyword">this</span>,name);</span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.showSub = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a - b);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.showAdd = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a + b);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a.apply(<span class="keyword">this</span>);</span><br><span class="line">  b.apply(<span class="keyword">this</span>);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> c();</span><br><span class="line">c.showSub(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//2</span></span><br><span class="line">c.showAdd(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="apply妙用"><a href="#apply妙用" class="headerlink" title="apply妙用"></a>apply妙用</h2><h3 id="Math-max-Math-min得到数组中最大-小的一项"><a href="#Math-max-Math-min得到数组中最大-小的一项" class="headerlink" title="Math.max/Math.min得到数组中最大/小的一项"></a>Math.max/Math.min得到数组中最大/小的一项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arr);</span><br></pre></td></tr></table></figure><h3 id="Array-prototype-push-可以实现两个数组的合并"><a href="#Array-prototype-push-可以实现两个数组的合并" class="headerlink" title="Array.prototype.push 可以实现两个数组的合并"></a>Array.prototype.push 可以实现两个数组的合并</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;每个Function对象，都带有一个apply()和call()方法&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>object方法</title>
    <link href="http://huangXin1538.github.io/2019/02/28/20190228-1/"/>
    <id>http://huangXin1538.github.io/2019/02/28/20190228-1/</id>
    <published>2019-02-28T04:00:07.000Z</published>
    <updated>2019-03-04T01:55:42.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Object-assign-target-source1-source2-…-合并对象"><a href="#1-Object-assign-target-source1-source2-…-合并对象" class="headerlink" title="1. Object.assign(target,source1,source2,…); 合并对象"></a>1. Object.assign(target,source1,source2,…); 合并对象</h2><p>将源对象的所有可枚举的属性合并到目标对象上。只拷贝源对象的自身属性，不拷贝继承的属性。</p><p>浅拷贝。如果拷贝的某个属性是对象，那么拷贝到的是这个对象的引用。</p><p>只进行值的复制，如果复制的值是个取值函数，那么求值后复制。</p><p>可以处理数组，但会把数组看做对象</p><p>同值属性被覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  x:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  x:<span class="number">1</span>,</span><br><span class="line">  y:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(target,source);</span><br><span class="line"><span class="comment">//target &#123;x:1,y:0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Object-create-prototype-propertiesObject-使用指定的原型对象及其属性去创建一个新的对象"><a href="#2-Object-create-prototype-propertiesObject-使用指定的原型对象及其属性去创建一个新的对象" class="headerlink" title="2.Object.create(prototype,[propertiesObject]); 使用指定的原型对象及其属性去创建一个新的对象"></a>2.Object.create(prototype,[propertiesObject]); 使用指定的原型对象及其属性去创建一个新的对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">  x:<span class="number">0</span>,</span><br><span class="line">  y:<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a,&#123;</span><br><span class="line">  z:&#123;</span><br><span class="line">    writable:<span class="literal">true</span>, <span class="comment">//是否可以采用 数据运算符 进行赋值</span></span><br><span class="line">    configurable:<span class="literal">true</span>,  <span class="comment">//是否可以修改、删除</span></span><br><span class="line">    value: <span class="string">"newAdd"</span> <span class="comment">//值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">输出： b = &#123;<span class="attr">z</span>:<span class="string">'newAdd'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Object-defineProperties-obj-props-直接在一个对象上定义新的属性或修改现有属性，并返回该对象-（批量）"><a href="#3-Object-defineProperties-obj-props-直接在一个对象上定义新的属性或修改现有属性，并返回该对象-（批量）" class="headerlink" title="3.Object.defineProperties(obj,props); 直接在一个对象上定义新的属性或修改现有属性，并返回该对象 （批量）"></a>3.Object.defineProperties(obj,props); 直接在一个对象上定义新的属性或修改现有属性，并返回该对象 （批量）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, </span><br><span class="line">&#123;  </span><br><span class="line">   <span class="string">'property1'</span>: &#123;    </span><br><span class="line">       value: <span class="literal">true</span>,  </span><br><span class="line">        writable: <span class="literal">true</span> </span><br><span class="line">   &#125;,  </span><br><span class="line">  <span class="string">'property2'</span>: &#123;   </span><br><span class="line">     value: <span class="string">'Hello'</span>,</span><br><span class="line">     writable: <span class="literal">false</span>  </span><br><span class="line">  &#125;  <span class="comment">// etc. etc.</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;property1: true, property2: "Hello"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-Object-defineProperty-obj-prop-descriptor-在一个对象上定义一个新属性，或者修改一个对象的现有属性，-并返回这个对象。（单个）"><a href="#4-Object-defineProperty-obj-prop-descriptor-在一个对象上定义一个新属性，或者修改一个对象的现有属性，-并返回这个对象。（单个）" class="headerlink" title="4.Object.defineProperty(obj,prop,descriptor); 在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。（单个）"></a>4.Object.defineProperty(obj,prop,descriptor); 在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。（单个）</h2><p>obj：必需。目标对象<br>prop：必需。需定义或修改的属性的名字<br>descriptor：必需。目标属性所拥有的特性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Object</span> = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>, <span class="string">'is'</span>, </span><br><span class="line">&#123;  </span><br><span class="line">     value: <span class="number">2</span>,  </span><br><span class="line">     configurable: <span class="literal">true</span>,  <span class="comment">// 是否可以删除或者再次修改属性</span></span><br><span class="line">     enumerable: <span class="literal">false</span>,  <span class="comment">//是否可以被枚举</span></span><br><span class="line">     writable: <span class="literal">true</span>   <span class="comment">//  是否可以被重写</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// Object = &#123;is:2&#125;</span></span><br><span class="line"><span class="comment">// 注意不能同时设置(writable，value) 和 get，set方法，否则浏览器会报错  </span></span><br><span class="line"><span class="comment">// 如果不设置属性特性。configurable、enumerable、writable 都默认为false</span></span><br><span class="line"><span class="comment">//Invalid property descriptor.  Cannot both specify accessors and a value or writable attribute</span></span><br></pre></td></tr></table></figure></p><p>getter/setter<br>当设置或获取对象的某个属性的值的时候，可以提供getter/setter方法。</p><p>getter 是一种获得属性值的方法<br>setter是一种设置属性值的方法。</p><p>可在获取值和设置值的时候触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> initValue = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function ()&#123;</span><br><span class="line">        <span class="comment">//当获取值的时候触发的函数</span></span><br><span class="line">        <span class="keyword">return</span> initValue;    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function (value)&#123;</span><br><span class="line">        <span class="comment">//当设置值的时候触发的函数,设置的新值通过参数value拿到</span></span><br><span class="line">        initValue = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey );  <span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">obj.newKey = <span class="string">'change value'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey ); <span class="comment">//change value</span></span><br></pre></td></tr></table></figure><h2 id="5-Object-keys-返回一个由一个给定对象的自身可枚举属性组成的数组-顺序与for…in获取的相同，但是for-i还会魅族其原型链的属性"><a href="#5-Object-keys-返回一个由一个给定对象的自身可枚举属性组成的数组-顺序与for…in获取的相同，但是for-i还会魅族其原型链的属性" class="headerlink" title="5.Object.keys(); 返回一个由一个给定对象的自身可枚举属性组成的数组,顺序与for…in获取的相同，但是for..i还会魅族其原型链的属性"></a>5.Object.keys(); 返回一个由一个给定对象的自身可枚举属性组成的数组,顺序与for…in获取的相同，但是for..i还会魅族其原型链的属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr));<span class="comment">// ['0', '1', '2']/* Object 对象 */</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;, keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="built_in">console</span>.log(keys);<span class="comment">// ["foo","baz"]</span></span><br></pre></td></tr></table></figure><h2 id="6-Object-values-方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同-区别在于-for-in-循环枚举原型链中的属性-。Object-values会过滤属性名为-Symbol-值的属性。"><a href="#6-Object-values-方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同-区别在于-for-in-循环枚举原型链中的属性-。Object-values会过滤属性名为-Symbol-值的属性。" class="headerlink" title="6.Object.values(); 方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。Object.values会过滤属性名为 Symbol 值的属性。"></a>6.Object.values(); 方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。Object.values会过滤属性名为 Symbol 值的属性。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> an_obj = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(an_obj)); <span class="comment">// ['b', 'c', 'a']</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h2 id="7-Object-entries-返回一个给定对象自身可枚举属性的键值对数组，其排列与使用-for…in-循环遍历该对象时返回的顺序一致（区别在于-for-in-循环也枚举原型链中的属性）。"><a href="#7-Object-entries-返回一个给定对象自身可枚举属性的键值对数组，其排列与使用-for…in-循环遍历该对象时返回的顺序一致（区别在于-for-in-循环也枚举原型链中的属性）。" class="headerlink" title="7.Object.entries(); 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。"></a>7.Object.entries(); 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ ['foo', 'bar'], ['baz', 42] ]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> simuArray = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(simuArray)); <span class="comment">// [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]</span></span><br></pre></td></tr></table></figure><h2 id="8-hasOwnProperty"><a href="#8-hasOwnProperty" class="headerlink" title="8.hasOwnProperty()"></a>8.hasOwnProperty()</h2><p>判断对象自身属性中是否具有指定的属性。</p><p>obj.hasOwnProperty(‘name’)</p><h2 id="9-Object-getOwnPropertyDescriptor-obj-prop-返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）-如果指定的属性存在于对象上，则返回其属性描述符对象（property-descriptor），否则返回-undefined。"><a href="#9-Object-getOwnPropertyDescriptor-obj-prop-返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）-如果指定的属性存在于对象上，则返回其属性描述符对象（property-descriptor），否则返回-undefined。" class="headerlink" title="9.Object.getOwnPropertyDescriptor(obj,prop);返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）.如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。"></a>9.Object.getOwnPropertyDescriptor(obj,prop);返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）.如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'name'</span>,<span class="string">'age'</span>] ;</span><br><span class="line">arr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,val)))</span><br><span class="line"><span class="comment">// &#123;value: "js", writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="10-Object-getOwnPropertyDescriptors-obj-获取一个对象的所有自身属性的描述符。"><a href="#10-Object-getOwnPropertyDescriptors-obj-获取一个对象的所有自身属性的描述符。" class="headerlink" title="10.  Object.getOwnPropertyDescriptors(obj)  获取一个对象的所有自身属性的描述符。"></a>10.  Object.getOwnPropertyDescriptors(obj)  获取一个对象的所有自身属性的描述符。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'js'</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(obj))</span><br></pre></td></tr></table></figure><h2 id="11-Object-getOwnPropertyNames-返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。"><a href="#11-Object-getOwnPropertyNames-返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。" class="headerlink" title="11. Object.getOwnPropertyNames(); 返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。"></a>11. Object.getOwnPropertyNames(); 返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">"a"</span>, <span class="number">1</span>: <span class="string">"b"</span>, <span class="number">2</span>: <span class="string">"c"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'z'</span>,&#123;</span><br><span class="line">    enumerable : <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj))  <span class="comment">// ["x", "y", "z"] 包含不可枚举属性 。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))                 <span class="comment">// ["x", "y"]      只包含可枚举属性 。</span></span><br></pre></td></tr></table></figure><h2 id="12-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。"><a href="#12-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。" class="headerlink" title="12 Object.getOwnPropertySymbols();返回一个给定对象自身的所有 Symbol 属性的数组。"></a>12 Object.getOwnPropertySymbols();返回一个给定对象自身的所有 Symbol 属性的数组。</h2><h2 id="13-isPrototypeOf-判断一个对象是否存在一另一个对象的原型链上"><a href="#13-isPrototypeOf-判断一个对象是否存在一另一个对象的原型链上" class="headerlink" title="13 isPrototypeOf(); 判断一个对象是否存在一另一个对象的原型链上"></a>13 isPrototypeOf(); 判断一个对象是否存在一另一个对象的原型链上</h2><h2 id="14-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。"><a href="#14-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。" class="headerlink" title="14 Object.getOwnPropertySymbols(); 返回一个给定对象自身的所有 Symbol 属性的数组。"></a>14 Object.getOwnPropertySymbols(); 返回一个给定对象自身的所有 Symbol 属性的数组。</h2><h2 id="15-Object-is-判断两个对象是否相同"><a href="#15-Object-is-判断两个对象是否相同" class="headerlink" title="15 Object.is(); 判断两个对象是否相同"></a>15 Object.is(); 判断两个对象是否相同</h2><p>如果下列任何一项成立，则返回true<br>两个值都是 undefined<br>两个值都是 null<br>两个值都是 true 或者都是 false<br>两个值是由相同个数的字符按照相同的顺序组成的字符串<br>两个值指向同一个对象<br>两个值都是数字并且<br>都是正零 +0<br>都是负零 -0<br>都是 NaN<br>都是除零和 NaN 外的其它同一个数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="built_in">window</span>, <span class="built_in">window</span>);   <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'bar'</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is([], []);           <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> test = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.is(test, test);       <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">null</span>);       <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 特例</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>, <span class="number">-0</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="number">0</span>/<span class="number">0</span>);         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="16-Object-freeze-冻结一个对象。被冻结的对象-是永远不变的，返回被冻结的对象"><a href="#16-Object-freeze-冻结一个对象。被冻结的对象-是永远不变的，返回被冻结的对象" class="headerlink" title="16 Object.freeze() 冻结一个对象。被冻结的对象 是永远不变的，返回被冻结的对象"></a>16 Object.freeze() 冻结一个对象。被冻结的对象 是永远不变的，返回被冻结的对象</h2><h2 id="17-Object-isFrozen-判断一个对象是否被冻结"><a href="#17-Object-isFrozen-判断一个对象是否被冻结" class="headerlink" title="17 Object.isFrozen() 判断一个对象是否被冻结 ."></a>17 Object.isFrozen() 判断一个对象是否被冻结 .</h2><h2 id="18-Object-preventExtensions-对象不能再添加新的属性。可修改，删除现有属性"><a href="#18-Object-preventExtensions-对象不能再添加新的属性。可修改，删除现有属性" class="headerlink" title="18 Object.preventExtensions()  对象不能再添加新的属性。可修改，删除现有属性"></a>18 Object.preventExtensions()  对象不能再添加新的属性。可修改，删除现有属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name :<span class="string">'lilei'</span>,</span><br><span class="line">    age : <span class="number">30</span> ,</span><br><span class="line">    sex : <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">obj = <span class="built_in">Object</span>.preventExtensions(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj);    <span class="comment">// &#123;name: "lilei", age: 30, sex: "male"&#125;</span></span><br><span class="line">obj.name = <span class="string">'haha'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj)     <span class="comment">// &#123;name: "haha", age: 30, sex: "male"&#125;</span></span><br><span class="line"><span class="keyword">delete</span> obj.sex ;</span><br><span class="line"><span class="built_in">console</span>.log(obj);    <span class="comment">// &#123;name: "haha", age: 30&#125;</span></span><br><span class="line">obj.address  = <span class="string">'china'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj)     <span class="comment">// &#123;name: "haha", age: 30&#125;</span></span><br></pre></td></tr></table></figure><h2 id="19-Object-isExtensible-判断对象是否是可扩展的，Object-preventExtensions，Object-seal-或-Object-freeze-方法都可以标记一个对象为不可扩展（non-extensible）"><a href="#19-Object-isExtensible-判断对象是否是可扩展的，Object-preventExtensions，Object-seal-或-Object-freeze-方法都可以标记一个对象为不可扩展（non-extensible）" class="headerlink" title="19 Object.isExtensible() 判断对象是否是可扩展的，Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）"></a>19 Object.isExtensible() 判断对象是否是可扩展的，Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）</h2><h2 id="20-Object-seal-让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError-异常-不会影响从原型链上继承的属性。但-proto-属性的值也会不能修改。"><a href="#20-Object-seal-让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError-异常-不会影响从原型链上继承的属性。但-proto-属性的值也会不能修改。" class="headerlink" title="20 Object.seal() 让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常. 不会影响从原型链上继承的属性。但 proto (  ) 属性的值也会不能修改。"></a>20 Object.seal() 让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常. 不会影响从原型链上继承的属性。但 <strong>proto</strong> (  ) 属性的值也会不能修改。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    prop: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    foo: <span class="string">"bar"</span></span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 可以添加新的属性,已有属性的值可以修改,可以删除</span></span><br><span class="line">obj.foo = <span class="string">"baz"</span>;</span><br><span class="line">obj.lumpy = <span class="string">"woof"</span>;</span><br><span class="line"><span class="keyword">delete</span> obj.prop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.seal(obj);</span><br><span class="line"> </span><br><span class="line">assert(o === obj);</span><br><span class="line">assert(<span class="built_in">Object</span>.isSealed(obj) === <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 仍然可以修改密封对象上的属性的值.</span></span><br><span class="line">obj.foo = <span class="string">"quux"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 但你不能把一个数据属性重定义成访问器属性.</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"foo"</span>, &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"g"</span>; &#125; &#125;); <span class="comment">// 抛出TypeError异常</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 现在,任何属性值以外的修改操作都会失败.</span></span><br><span class="line">obj.quaxxor = <span class="string">"the friendly duck"</span>; <span class="comment">// 静默失败,新属性没有成功添加</span></span><br><span class="line"><span class="keyword">delete</span> obj.foo; <span class="comment">// 静默失败,属性没有删除成功</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// ...在严格模式中,会抛出TypeError异常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">delete</span> obj.foo; <span class="comment">// 抛出TypeError异常</span></span><br><span class="line">  obj.sparky = <span class="string">"arf"</span>; <span class="comment">// 抛出TypeError异常</span></span><br><span class="line">&#125;</span><br><span class="line">fail();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用Object.defineProperty方法同样会抛出异常</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"ohai"</span>, &#123; <span class="attr">value</span>: <span class="number">17</span> &#125;); <span class="comment">// 抛出TypeError异常</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"foo"</span>, &#123; <span class="attr">value</span>: <span class="string">"eit"</span> &#125;); <span class="comment">// 成功将原有值改变</span></span><br></pre></td></tr></table></figure><h2 id="21-Object-isSealed-判断一个对象是否密闭"><a href="#21-Object-isSealed-判断一个对象是否密闭" class="headerlink" title="21.Object.isSealed() 判断一个对象是否密闭"></a>21.Object.isSealed() 判断一个对象是否密闭</h2><h2 id="Object状态"><a href="#Object状态" class="headerlink" title="Object状态:"></a>Object状态:</h2><p>1.冻结。永远不会变<br>2.密闭。<br>  a:不可添加新属性<br>  b:已有属性变的不可删除<br>  c:数据的属性不能被重新定义为转换器属性<br>  d:属性值仍然可以修改<br>  e:尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常. 不会影响从原型链上继承的属性<br>  f:<strong>proto</strong> (  ) 属性的值也会不能修改<br>3.不可扩展：对象不能再添加新的属性。可修改，删除现有属性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Object-assign-target-source1-source2-…-合并对象&quot;&gt;&lt;a href=&quot;#1-Object-assign-target-source1-source2-…-合并对象&quot; class=&quot;headerlink&quot; title=&quot;1.
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue首屏加载时间过长优化</title>
    <link href="http://huangXin1538.github.io/2019/02/21/20190221-1/"/>
    <id>http://huangXin1538.github.io/2019/02/21/20190221-1/</id>
    <published>2019-02-21T06:53:13.000Z</published>
    <updated>2019-03-04T01:55:32.893Z</updated>
    
    <content type="html"><![CDATA[<p>主要思路：减小首屏加载的js文件体积</p><h2 id="1-减少不必要的引用"><a href="#1-减少不必要的引用" class="headerlink" title="1.减少不必要的引用"></a>1.减少不必要的引用</h2><p>1.看package.json;<br>2.查看打包分析<br>  安装 webpack-bundle-analyzer<br>  vue.config.js配置<br>  chainWebpack: (config) =&gt; {  //打包分析<br>    config.plugin(‘webpack-bundle-analyzer’)<br>      .use(BundleAnalyzerPlugin)<br>        .init(Plugin =&gt; new Plugin());<br>  },<br>  run build –report</p><h2 id="2-路由懒加载，组件懒加载"><a href="#2-路由懒加载，组件懒加载" class="headerlink" title="2.路由懒加载，组件懒加载"></a>2.路由懒加载，组件懒加载</h2><h2 id="3-引用转为cdn"><a href="#3-引用转为cdn" class="headerlink" title="3.引用转为cdn"></a>3.引用转为cdn</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要思路：减小首屏加载的js文件体积&lt;/p&gt;
&lt;h2 id=&quot;1-减少不必要的引用&quot;&gt;&lt;a href=&quot;#1-减少不必要的引用&quot; class=&quot;headerlink&quot; title=&quot;1.减少不必要的引用&quot;&gt;&lt;/a&gt;1.减少不必要的引用&lt;/h2&gt;&lt;p&gt;1.看package.j
      
    
    </summary>
    
    
      <category term="vue" scheme="http://huangXin1538.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>flex兼容</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-12/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-12/</id>
    <published>2019-01-30T09:49:51.000Z</published>
    <updated>2019-03-04T01:55:29.444Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>旧版本dispaly: box;，过渡版本dispaly: flex box;，以及现在的标准版本display: flex</p><p>Android<br>2.3 开始就支持旧版本 display:-webkit-box;<br>4.4 开始支持标准版本 display: flex;</p><p>IOS<br>6.1 开始支持旧版本 display:-webkit-box;<br>7.1 开始支持标准版本display: flex;</p><p>PC<br>ie10开始支持，但是IE10的是-ms形式的。</p><p>###</p><p>###<br>写法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box; <span class="comment">/* 老版本语法: Safari, iOS, Android browser, older WebKit browsers. */</span></span><br><span class="line">  <span class="attribute">display</span>: -moz-box; <span class="comment">/* 老版本语法: Firefox (buggy) */</span></span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox; <span class="comment">/* 混合版本语法: IE 10 */</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* 新版本语法: Chrome 21+ */</span></span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* 新版本语法: Opera 12.1, Firefox 22+ */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-1</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: <span class="number">1</span>; <span class="comment">/* Chrome */</span></span><br><span class="line">  <span class="attribute">-ms-flex</span>: <span class="number">1</span>; <span class="comment">/* IE 10 */</span></span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* NEW, Spec - Opera 12.1, Firefox 20+ */</span></span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>; <span class="comment">/* OLD - iOS 6-, Safari 3.1-6 */</span></span><br><span class="line">  <span class="attribute">-moz-box-flex</span>: <span class="number">1</span>; <span class="comment">/* OLD - Firefox 19- */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-v</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">-ms-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-align-center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-pack-center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-pack-justify</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: justify;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-pack-around</span> &#123;</span><br><span class="line">　　<span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">　　<span class="attribute">-webkit-justify-content</span>: space-around;</span><br><span class="line">　　<span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">　　<span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性：ios 4+、android 2.3+、winphone8+</p><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;旧版本dispaly: box;，过渡版本dispaly: flex box;，以及现在的标准版本display: flex&lt;/p&gt;
&lt;p&gt;Android&lt;br&gt;2.3 开始就支持旧版本 display:-webkit-box;&lt;br&gt;4.4 开始支持标准版本
      
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js实现面向对象</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-11/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-11/</id>
    <published>2019-01-30T09:49:48.000Z</published>
    <updated>2019-03-04T01:55:24.777Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>面向对象：将抽象模型实例化为对象，属性和方法都通过操作对象来获取和实现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">color,name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color:color,</span><br><span class="line">  <span class="keyword">this</span>.name:name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'黄色'</span>,<span class="string">'大毛'</span>);</span><br></pre></td></tr></table></figure></p><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;面向对象：将抽象模型实例化为对象，属性和方法都通过操作对象来获取和实现。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css单位</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-10/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-10/</id>
    <published>2019-01-30T09:49:44.000Z</published>
    <updated>2019-03-04T01:55:21.311Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>%:百分比<br>cm：厘米<br>mm：毫米<br>px:像素<br>in：英寸</p><p>rgb(x,x,x)    RGB 值 (比如 rgb(255,0,0))<br>rgb(x%, x%, x%)    RGB 百分比值 (比如 rgb(100%,0%,0%))</p><p>#rrggbb    十六进制数 (比如 #ff0000)</p><p>新属性<br>vw：视窗宽度的百分比（1vw 代表视窗的宽度为 1%）<br>vh：视窗高度的百分比<br>vmin：当前 vw 和 vh 中较小的一个值<br>vmax：当前 vw 和 vh 中较大的一个值</p><p>做移动页面开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。<br>由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。</p><p>Android：自 4.4 版起就完美支持（2013年12月）<br>iOS：自 iOS8 版起就完美支持（2014年9月）</p><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;%:百分比&lt;br&gt;cm：厘米&lt;br&gt;mm：毫米&lt;br&gt;px:像素&lt;br&gt;in：英寸&lt;/p&gt;
&lt;p&gt;rgb(x,x,x)    RGB 值 (比如 rgb(255,0,0))&lt;br&gt;rgb(x%, x%, x%)    RGB 百分比值 (比如 rgb(100%
      
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css 动画</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-9/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-9/</id>
    <published>2019-01-30T09:49:40.000Z</published>
    <updated>2019-03-04T01:55:15.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h3><p>指控制最开始的状态和最末的状态的动画，中间的状态由浏览器自动帮我们计算生成。</p><h3 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h3><p>时间轴上定义关键帧，通过连续播放形成动画</p><h3 id="实现属性"><a href="#实现属性" class="headerlink" title="实现属性"></a>实现属性</h3><p>css animation<br>css transiton</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;补间动画&quot;&gt;&lt;a href=&quot;#补间动画&quot; class=&quot;headerlink&quot; title=&quot;补间动画&quot;&gt;&lt;/a&gt;补间动画&lt;/h3&gt;&lt;p&gt;指控制最开始的状态和最末的状态的动画，中间的状态由浏览器自动帮我们计算生成。&lt;/p&gt;
&lt;h3 id=&quot;逐帧动画&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-8/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-8/</id>
    <published>2019-01-30T09:49:36.000Z</published>
    <updated>2019-03-13T09:30:38.383Z</updated>
    
    <content type="html"><![CDATA[<p>###</p><p>js 实现异步操作的一种方式</p><p>三种状态 等待（pending）、已完成（fulfilled）、已拒绝（rejected）</p><p>Promise 的构造函数接收一个函数作为参数，该函数接受两个额外的函数，resolve 和 reject，这两个函数分别代表将当前 Promise 置为 fulfilled(解决)和 rejected(拒绝)两个状态。Promise 正是通过这两个状态来控制异步操作的结果</p><p>resolve()内部的参数会传递给 then(); reject 方法参数传给 catch();</p><p>当 Promise 中的函数执行 resolve 方法后，由之前的 pending –&gt; resolved</p><p>基础例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (执行某些操作成功了) &#123;</span><br><span class="line">          resolve(&#123;</span><br><span class="line">            name:<span class="string">'resolve'</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//执行失败</span></span><br><span class="line">          reject(&#123;</span><br><span class="line">            name:<span class="string">'err'</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line">同时监听成功和错误</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//成功</span></span><br><span class="line">  <span class="built_in">console</span>.log(contents)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//拒绝</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.message)</span><br><span class="line">&#125;)</span><br><span class="line">只监听成功</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//成功</span></span><br><span class="line">  <span class="built_in">console</span>.log(contents)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">只监听错误</span><br><span class="line">promise.then(<span class="literal">null</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//拒绝</span></span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promise的<span class="keyword">catch</span>方法，相当于只给其传入拒绝处理程序的then()方法。</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="多个函数实战"><a href="#多个函数实战" class="headerlink" title="多个函数实战"></a>多个函数实战</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"c"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a()</span><br><span class="line">  .then(b())</span><br><span class="line">  .then(c());</span><br></pre></td></tr></table></figure><h3 id="Promise-then-回调异步性"><a href="#Promise-then-回调异步性" class="headerlink" title="Promise.then()回调异步性"></a>Promise.then()回调异步性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">"success"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"which one is called first ?"</span>);</span><br><span class="line"></span><br><span class="line">success后执行;</span><br></pre></td></tr></table></figure><h3 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h3><p>语法：Promise.prototype.then(onFulfilled, onRejected);</p><p>对 promise添加onFulfilled 和 onRejected 回调，并返回一个新的Promise实例，且返回值将作为参数传入这个心的Promise的resolve函数</p><p>因此，可以使用链式写法。后一个回调函数，会等待前一个promise对象的状态发生变化，才会被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (执行某些操作成功了) &#123;</span><br><span class="line">          resolve(&#123;</span><br><span class="line">            name:<span class="string">'resolve'</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//执行失败</span></span><br><span class="line">          reject(&#123;</span><br><span class="line">            name:<span class="string">'err'</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//resolve时执行</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//reject时执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h3><p>.then(undefinedn,onRejected)的别名，用于指定发生错误时的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******等同于*******/</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;).then(<span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h3><p>var p = Promise.all([p1,p2,p3]);</p><p>该方法接受一个数组作参数，数组中对象均为promise实例(如果不是一个promise，该项会被用Promise.resolve转换为一个promise)。<br>p 的状态由这三个promise实例决定。</p><p>p1,p2,p3 也是同时执行，不是顺序执行</p><p>当p1, p2, p3状态都变为fulfilled，p的状态才会变为fulfilled，并将三个promise返回的结果，按参数的顺序（而不是 resolved的顺序）存入数组，传给p的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  setTimeout(resolve, <span class="number">1000</span>, <span class="string">"one"</span>); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  setTimeout(reject, <span class="number">2000</span>, <span class="string">"two"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(resolve, <span class="number">1000</span>, <span class="string">"third"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolve'</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'reject'</span>, error);    <span class="comment">// =&gt; reject three</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//约 3s 后</span></span><br><span class="line">[<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>]</span><br></pre></td></tr></table></figure><p>当p1, p2, p3其中之一状态变为rejected，p的状态也会变为rejected，并把第一个被reject的promise的返回值，传给p的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  setTimeout(resolve, <span class="number">1000</span>, <span class="string">"one"</span>); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  setTimeout(reject, <span class="number">2000</span>, <span class="string">"two"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">"three"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolve'</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'reject'</span>, error);    <span class="comment">// =&gt; reject three</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">reject three</span><br></pre></td></tr></table></figure><h3 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h3><p>该方法同样将多个Promise实例，包装成一个新的Promise实例</p><p>var p = Promise.race([p1,p2,p3]); </p><p>p1,p2,p3谁先有返回，p就返回它的返回</p><p>Promise.race 接收一个数组作参数，当P1,P2,P3中有一个实例的状态发生改变（变为fulfilled或rejected），p的状态就发生改变，并将第一个改变状态的promise的返回值，传给p的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    setTimeout(reject, <span class="number">500</span>, <span class="string">"one"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    setTimeout(resolve, <span class="number">100</span>, <span class="string">"two"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolve'</span>, value); </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//not called</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'reject'</span>, error); </span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">resolve two</span><br></pre></td></tr></table></figure><p>当第一个promise对象变为resolve后，并不会取消其他promise对象的执行</p><h3 id="reslove"><a href="#reslove" class="headerlink" title="reslove();"></a>reslove();</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>);</span><br><span class="line">等同于</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="string">'success'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个方法会让这个Promise对象立即进入resolve状态，并将结果success传递给then执行的onfulfilled回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">输出 Success</span><br></pre></td></tr></table></figure><h3 id="reject"><a href="#reject" class="headerlink" title=".reject()"></a>.reject()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>));</span><br><span class="line">等同于</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>让Promise对象立即进入rejected状态，并将错误对象传递到执行的onRejected回调函数</p><h2 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h2><h3 id="1-reject-和catch-的区别"><a href="#1-reject-和catch-的区别" class="headerlink" title="1. reject 和catch 的区别"></a>1. reject 和catch 的区别</h3><p>promise.then(onfulfilled,onrejected)<br>在onFulfilled中发生异常的话，在onrejected中是捕获不到这个异常的</p><p>promise.then(onFulfilled).catch(onRejected)<br>.then中产生的异常可以在.catch中捕获</p><p>一般情况下，使用catch。<br>catch也可以用then表示<br>.catch === .then(null, onRejected)</p><h3 id="2-如果then中抛出了错误，而没有catch，会一直保持rejected状态，直到catch了错误"><a href="#2-如果then中抛出了错误，而没有catch，会一直保持rejected状态，直到catch了错误" class="headerlink" title="2.如果then中抛出了错误，而没有catch，会一直保持rejected状态，直到catch了错误"></a>2.如果then中抛出了错误，而没有catch，会一直保持rejected状态，直到catch了错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Task A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Task B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Catch Error: A or B"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Final Task"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise</span><br><span class="line">    .then(taskA)</span><br><span class="line">    .then(taskB)</span><br><span class="line">    .catch(onRejected)</span><br><span class="line">    .then(finalTask);</span><br><span class="line">    </span><br><span class="line">-------output-------</span><br><span class="line">Catch <span class="built_in">Error</span>: A or B,<span class="attr">ReferenceError</span>: x is not defined</span><br><span class="line">Final Task</span><br></pre></td></tr></table></figure><h3 id="3-每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"><a href="#3-每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据" class="headerlink" title="3.每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"></a>3.每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据</h3><h3 id="4-promise的状态变为resolve活reject-，就凝固了，不会再改变"><a href="#4-promise的状态变为resolve活reject-，就凝固了，不会再改变" class="headerlink" title="4.promise的状态变为resolve活reject ，就凝固了，不会再改变"></a>4.promise的状态变为resolve活reject ，就凝固了，不会再改变</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;/p&gt;
&lt;p&gt;js 实现异步操作的一种方式&lt;/p&gt;
&lt;p&gt;三种状态 等待（pending）、已完成（fulfilled）、已拒绝（rejected）&lt;/p&gt;
&lt;p&gt;Promise 的构造函数接收一个函数作为参数，该函数接受两个额外的函数，resolve 和 reje
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端缓存机制</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-7/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-7/</id>
    <published>2019-01-30T09:49:32.000Z</published>
    <updated>2019-01-30T09:52:13.590Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js安全</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-6/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-6/</id>
    <published>2019-01-30T09:49:29.000Z</published>
    <updated>2019-01-30T09:51:59.679Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css BFC</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-5/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-5/</id>
    <published>2019-01-30T09:49:25.000Z</published>
    <updated>2019-01-30T09:51:50.611Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
