<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>希染</title>
  
  <subtitle>愿你走过半生，归来仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huangXin1538.github.io/"/>
  <updated>2019-04-17T10:03:50.412Z</updated>
  <id>http://huangXin1538.github.io/</id>
  
  <author>
    <name>希染</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重绘和回流</title>
    <link href="http://huangXin1538.github.io/2019/04/17/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/"/>
    <id>http://huangXin1538.github.io/2019/04/17/重绘和回流/</id>
    <published>2019-04-17T09:56:47.000Z</published>
    <updated>2019-04-17T10:03:50.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此损耗较少</p><p>常见重绘操作有：<br>1.改变元素颜色<br>2.改变元素背景色<br>3.。。。。。。</p><h2 id="回流（重排）"><a href="#回流（重排）" class="headerlink" title="回流（重排）"></a>回流（重排）</h2><p>当元素的尺寸、结构或者触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新计算，计算后还需要重新布局页面，因此是较重的操作。</p><p>常见回流操作有：<br>1.页面初次渲染<br>2.浏览器窗口大小改变<br>3.元素尺寸、位置、内容发生改变<br>4.元素字体大小变化<br>5.添加或删除可见的DOM<br>6.激活css伪类（：hover）<br>7.。。。。。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回流必定触发重绘，重绘不一定触发回流。回流开销较大。</p><p>如何避免大量使用重绘和回流</p><p>1.避免频繁操作样式，可汇总后统一修改<br>2.尽量使用class进行样式修改，而不是直接插入样式<br>3.减少dom操作。可使用字符串一次插入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重绘&quot;&gt;&lt;a href=&quot;#重绘&quot; class=&quot;headerlink&quot; title=&quot;重绘&quot;&gt;&lt;/a&gt;重绘&lt;/h2&gt;&lt;p&gt;当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此损耗较少&lt;/p&gt;
&lt;p&gt;常见重绘操作
      
    
    </summary>
    
    
      <category term="优化" scheme="http://huangXin1538.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>js节流和防抖</title>
    <link href="http://huangXin1538.github.io/2019/04/17/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/"/>
    <id>http://huangXin1538.github.io/2019/04/17/节流和防抖/</id>
    <published>2019-04-17T09:36:10.000Z</published>
    <updated>2019-04-17T09:54:11.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>在进行窗口的 resize、scroll、输入框内容验证、touchmove 等操作时，如果事件处理函数调用的频率无限制，会加重浏览器负担，甚至卡死。导致用户体验很糟糕。<br>此时可以采用 debounce（防抖）和 throttle（节流）的方式减少调用频率，同时不影响实际效果</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>防抖：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次。如果设定的事件到来之前，又触发了事件，就重新开始延时<br>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(fn, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, debounce(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。<br>例如。当持续触发 scroll 事件时，并不立即执行回调，每隔 1s 才会执行一次</p><h3 id="1-时间戳方式实现"><a href="#1-时间戳方式实现" class="headerlink" title="1.时间戳方式实现"></a>1.时间戳方式实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prev = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      prev = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h3 id="2-定时器方式实现"><a href="#2-定时器方式实现" class="headerlink" title="2.定时器方式实现"></a>2.定时器方式实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>函数防抖：讲几次操作合为一次操作进行。原理是维护一个定时器，规定在delay时间后触发，但是在delay时间内再次触发，就会取消之前的定时器重新设置。这样一来，只有最后一次才能触发</p><p>函数节流：使得一定时间内只触发一次函数。原理是通过判断是否到达一定时间来触发函数</p><p>区别：<br>  函数节流不管事件触发多频繁，都会保证在规定时间内一定会触发一次函数<br>  防抖只是在最后一次事件后才触发一次函数<br>  比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次ajax，而不是在用户停下时才去请求。这样的场景适合用节流<br>  页面缩放修改rem设定，适合用防抖</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;意义&quot;&gt;&lt;a href=&quot;#意义&quot; class=&quot;headerlink&quot; title=&quot;意义&quot;&gt;&lt;/a&gt;意义&lt;/h2&gt;&lt;p&gt;在进行窗口的 resize、scroll、输入框内容验证、touchmove 等操作时，如果事件处理函数调用的频率无限制，会加重浏览器负担，
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js字符串方法</title>
    <link href="http://huangXin1538.github.io/2019/04/09/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
    <id>http://huangXin1538.github.io/2019/04/09/js字符串方法/</id>
    <published>2019-04-09T09:18:17.000Z</published>
    <updated>2019-04-09T09:37:25.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h2><p>返回指定索引位置的字符</p><h2 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h2><p>返回指定索引位置的Unicode值</p><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p>连接两个或多个字符串，返回连接后的字符串</p><h2 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode()"></a>fromCharCode()</h2><p>将Unicode转换为字符串</p><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>返回字符串中指定字符第一次出现的位置</p><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>最后一次出现的位置</p><h2 id="localeCompare"><a href="#localeCompare" class="headerlink" title="localeCompare()"></a>localeCompare()</h2><p>用本地特定的顺序来比较两个字符串</p><h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><p>找到一个或多个正则表达式的匹配</p><h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><p>替换与正则表达式匹配的字符串</p><h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><p>检索与正则表达式匹配的值</p><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>提取字符串的片段，并在新的字符串中返回被提取的部分</p><h2 id="split-分隔符"><a href="#split-分隔符" class="headerlink" title="split(分隔符)"></a>split(分隔符)</h2><p>按分隔符把字符串分割为数组</p><h2 id="substr-start-length"><a href="#substr-start-length" class="headerlink" title="substr(start,length)"></a>substr(start,length)</h2><p>从起始索引号提取字符串中指定数目的字符</p><h2 id="substring-from-to"><a href="#substring-from-to" class="headerlink" title="substring(from,to)"></a>substring(from,to)</h2><p>提取字符串中两个指定的索引号之间的字符</p><h2 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h2><p>‘ABC’.toLocaleLowerCase() //abc<br>转为小写,不会改变原字符串</p><h2 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h2><p>‘abc’.toLocaleLowerCase() //ABC<br>转为大写,不会改变原字符串</p><h2 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h2><p>删除字符串首尾空格<br>str.trim();<br>不会改变原字符串</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;charAt&quot;&gt;&lt;a href=&quot;#charAt&quot; class=&quot;headerlink&quot; title=&quot;charAt()&quot;&gt;&lt;/a&gt;charAt()&lt;/h2&gt;&lt;p&gt;返回指定索引位置的字符&lt;/p&gt;
&lt;h2 id=&quot;charCodeAt&quot;&gt;&lt;a href=&quot;#char
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js数组方法</title>
    <link href="http://huangXin1538.github.io/2019/04/09/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://huangXin1538.github.io/2019/04/09/js数组方法/</id>
    <published>2019-04-09T06:43:17.000Z</published>
    <updated>2019-04-09T08:52:03.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="concat-合并"><a href="#concat-合并" class="headerlink" title="concat 合并"></a>concat 合并</h2><p>arr1.concat(arr2)</p><h2 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h2><p>该方法返回一个新的Array Iterator（迭代器）对象，该对象包含数组中每个索引对应的键/值对<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span> iterator = a.entries()</span><br><span class="line"><span class="built_in">console</span>.log(iterator) <span class="comment">// Array Iterator&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// [0,'a']</span></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a <span class="keyword">of</span> iterator)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[0,'a']</span></span><br><span class="line"><span class="comment">//[1,'b']</span></span><br><span class="line"><span class="comment">//[2,'c']</span></span><br></pre></td></tr></table></figure></p><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>array.every(function(currentValue,index,arr), thisValue)<br>检测数组中每个元素是否符合筛选条件；<br>参数1：function(每一个元素) 必传<br>    2：thisValue 可选<br>返回 true/false</p><h2 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h2><p>array.fill(value, start, end)<br>将数组中元素都替换成固定值</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>过滤出符合条件的元素，组成新数组并返回<br>array.filter(function(currentValue,index,arr), thisValue)</p><p>1.不会对空数组检测<br>2.不会改变原数组</p><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>获取数组中第一个符合条件的值<br>array.find(function(currentValue, index, arr),thisValue)</p><p>找不到返回undefined</p><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h2><p>获取数组中第一个符合条件的值，返回所在位置<br>array.findIndex(function(currentValue, index, arr),thisValue)<br>找不到返回-1</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>遍历数组<br>array.forEach(function(currentValue, index, arr), thisValue)</p><h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><p>判断数组中是否包含一个指定的值<br>arr.includes(searchElement, fromIndex)</p><p>返回true/false</p><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>array.indexOf(item,start)<br>返回数组中某个指定元素的位置<br>找不到返回-1</p><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>array.join(分隔符); //不传就是没有分隔<br>数组中所有元素放入一个字符串并返回</p><h2 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h2><p>从数组创建一个包含数组键的可迭代对象<br>array.keys();<br>返回： Array Iterator<br>for(let a of array.keys()){<br>    console.log(a)<br>}<br>log出索引值</p><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>获取数组中第一个符合条件的值，返回所在位置，倒序<br>array.lastIndexOf();</p><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值<br>array.map(function(currentValue,index,arr), thisValue)</p><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>删除数组中最后一个元素，并返回<br>array.pop();</p><h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><p>向数组末添加一个或多个元素，返回新长度<br>array.push(newelement1,newelement2,….,newelementX)</p><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值<br>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)<br>高阶函数，可用于compose</p><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h2><p>从右边开始reduce</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>翻转数组并返回</p><h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><p>删除数组中第一个元素，并返回该元素<br>会改变数组长度</p><h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><p>array.splice(index,howmany,item1,…..,itemX)<br>按照指定位置，删除数组中的元素；第三个以后参数，可以在删除位置添加元素</p><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>用法同every()，区别为every：每一项都为true，才返回true;some: 任一项为true，就返回true</p><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p>array.sort(sortfunction(a,b))<br>对数组进行排序,a,b为前后两个元素，return a&gt;b;升序，return a&lt; b 降序；</p><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>array.slice(start,end);<br>从已有数组中选出指定元素，并放进一个数组返回<br>不会改变原数组</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>[0,1].toString = ‘0,1’</p><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><p>想数组开头添加一个或多个元素，返回新长度<br>arrayObject.unshift(newelement1,newelement2,….,newelementX)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;concat-合并&quot;&gt;&lt;a href=&quot;#concat-合并&quot; class=&quot;headerlink&quot; title=&quot;concat 合并&quot;&gt;&lt;/a&gt;concat 合并&lt;/h2&gt;&lt;p&gt;arr1.concat(arr2)&lt;/p&gt;
&lt;h2 id=&quot;entries&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js数据类型</title>
    <link href="http://huangXin1538.github.io/2019/04/09/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://huangXin1538.github.io/2019/04/09/js数据类型/</id>
    <published>2019-04-09T06:40:31.000Z</published>
    <updated>2019-04-09T06:42:59.946Z</updated>
    
    <content type="html"><![CDATA[<p>基本类型：String（字符型）、Number（数字型）、Boolean(布尔型)、undefined、null</p><p>引用类型：Object（包括function/array）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基本类型：String（字符型）、Number（数字型）、Boolean(布尔型)、undefined、null&lt;/p&gt;
&lt;p&gt;引用类型：Object（包括function/array）&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js闭包</title>
    <link href="http://huangXin1538.github.io/2019/04/02/20190402-2/"/>
    <id>http://huangXin1538.github.io/2019/04/02/20190402-2/</id>
    <published>2019-04-02T08:26:57.000Z</published>
    <updated>2019-04-09T03:03:55.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js-内存回收机制-和-闭包定义"><a href="#js-内存回收机制-和-闭包定义" class="headerlink" title="js 内存回收机制 和 闭包定义"></a>js 内存回收机制 和 闭包定义</h2><p>一个函数在执行开始的时候，会给其中定义的变量划分内存空间保存，以备后面的语句所用，等到函数执行完毕，这些变量就被认为是无用的，对应的空间会被收回。</p><p>下次再执行这个函数的时候，所有的变量又回到了最初的的状态，重新赋值使用。</p><p>但是当一个函数内部又嵌套了一个函数，而这个函数是有可能在外部被调用到的。并且这个内部函数又使用了外部函数的某些变量的话，这种内存回收机制就会出现问题。如果在外部函数返回后，又直接调用了内部函数。那么内部函数就无法读取他所需要的外部函数中的变量的值了。</p><p>所以js解释器在遇到函数定义的时候会自动把函数和他可能使用的变量一起保存下来。也就形成一个闭包。<br>这些变量不会被内存回收，只有当内部的函数不可能被调用以后（例如被删除、没有了指针），才会销毁这个闭包，而没有任何一个闭包引用的变量才会被下一次内存回收启动时回收。</p><h2 id="闭包特性"><a href="#闭包特性" class="headerlink" title="闭包特性"></a>闭包特性</h2><p> 1.函数嵌套函数<br> 2.函数内部可以引用外部的参数和变量<br> 3.参数和变量不会被回收</p><h2 id="闭包好处"><a href="#闭包好处" class="headerlink" title="闭包好处"></a>闭包好处</h2><p> 1.希望一个变量长期存储在内存中<br> 2.避免全局变量的污染<br> 3.私有成员的存在</p><h2 id="闭包坏处"><a href="#闭包坏处" class="headerlink" title="闭包坏处"></a>闭包坏处</h2><p> 1.常驻内存，增加内存使用量<br> 2.使用不当造成内存泄漏（一块被分配的内存既不能使用，又不能回收）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js-内存回收机制-和-闭包定义&quot;&gt;&lt;a href=&quot;#js-内存回收机制-和-闭包定义&quot; class=&quot;headerlink&quot; title=&quot;js 内存回收机制 和 闭包定义&quot;&gt;&lt;/a&gt;js 内存回收机制 和 闭包定义&lt;/h2&gt;&lt;p&gt;一个函数在执行开始的时候，会
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js变量提升</title>
    <link href="http://huangXin1538.github.io/2019/04/02/20190402-1/"/>
    <id>http://huangXin1538.github.io/2019/04/02/20190402-1/</id>
    <published>2019-04-02T08:10:29.000Z</published>
    <updated>2019-04-02T08:23:41.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量进入作用域方式"><a href="#变量进入作用域方式" class="headerlink" title="变量进入作用域方式"></a>变量进入作用域方式</h2><p>1.语言内置：所有的作用域都有 this 和 arguments<br>2.形式参数：函数的形式参数会作为函数作用域的一部分<br>3.函数声明: function a(){}<br>4.变量声明：var a;</p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">test1();</span><br><span class="line">log依次为<span class="number">5</span>，<span class="literal">undefined</span>，<span class="number">10</span>；</span><br><span class="line"></span><br><span class="line">实际执行顺序</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量进入作用域方式&quot;&gt;&lt;a href=&quot;#变量进入作用域方式&quot; class=&quot;headerlink&quot; title=&quot;变量进入作用域方式&quot;&gt;&lt;/a&gt;变量进入作用域方式&lt;/h2&gt;&lt;p&gt;1.语言内置：所有的作用域都有 this 和 arguments&lt;br&gt;2.形式参数
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>html5调起摄像头拍照</title>
    <link href="http://huangXin1538.github.io/2019/03/29/20190329-1/"/>
    <id>http://huangXin1538.github.io/2019/03/29/20190329-1/</id>
    <published>2019-03-29T06:19:23.000Z</published>
    <updated>2019-03-29T06:26:09.817Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html部分</span></span><br><span class="line">&lt;video id=<span class="string">"video"</span> width=<span class="string">"480"</span> height=<span class="string">"320"</span> controls&gt;&lt;/video&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;button id=<span class="string">"capture"</span>&gt;拍照&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"480"</span> height=<span class="string">"320"</span>&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>);</span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">//访问用户媒体设备的兼容方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserMedia</span>(<span class="params">constraints, success, error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line">    <span class="comment">//最新的标准API</span></span><br><span class="line">    navigator.mediaDevices</span><br><span class="line">      .getUserMedia(constraints)</span><br><span class="line">      .then(success)</span><br><span class="line">      .catch(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia) &#123;</span><br><span class="line">    <span class="comment">//webkit核心浏览器</span></span><br><span class="line">    navigator.webkitGetUserMedia(constraints, success, error);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia) &#123;</span><br><span class="line">    <span class="comment">//firfox浏览器</span></span><br><span class="line">    navigator.mozGetUserMedia(constraints, success, error);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia) &#123;</span><br><span class="line">    <span class="comment">//旧版API</span></span><br><span class="line">    navigator.getUserMedia(constraints, success, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//兼容webkit核心浏览器</span></span><br><span class="line">  <span class="keyword">let</span> CompatibleURL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">  <span class="comment">//将视频流设置为video元素的源</span></span><br><span class="line">  <span class="built_in">console</span>.log(stream);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//video.src = CompatibleURL.createObjectURL(stream);</span></span><br><span class="line">  video.srcObject = stream;</span><br><span class="line">  video.play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`访问用户媒体设备失败<span class="subst">$&#123;error.name&#125;</span>, <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  navigator.mediaDevices.getUserMedia ||</span><br><span class="line">  navigator.getUserMedia ||</span><br><span class="line">  navigator.webkitGetUserMedia ||</span><br><span class="line">  navigator.mozGetUserMedia</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">//调用用户媒体设备, 访问摄像头</span></span><br><span class="line">  getUserMedia(&#123;<span class="attr">video</span>: &#123;<span class="attr">width</span>: <span class="number">480</span>, <span class="attr">height</span>: <span class="number">320</span>&#125;&#125;, success, error);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"不支持访问用户媒体"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击拍照</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'capture'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  context.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">320</span>);      </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="html5" scheme="http://huangXin1538.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>base64与file格式图片转换</title>
    <link href="http://huangXin1538.github.io/2019/03/26/20190326-1/"/>
    <id>http://huangXin1538.github.io/2019/03/26/20190326-1/</id>
    <published>2019-03-26T07:14:44.000Z</published>
    <updated>2019-03-29T03:55:43.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="base64转file"><a href="#base64转file" class="headerlink" title="base64转file"></a>base64转file</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl, filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//将base64转换为文件</span></span><br><span class="line">  <span class="keyword">var</span> arr = dataurl.split(<span class="string">","</span>),</span><br><span class="line">    mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">    bstr = atob(arr[<span class="number">1</span>]),</span><br><span class="line">    n = bstr.length,</span><br><span class="line">    u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], filename, &#123;</span><br><span class="line">    type: mime</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> file = dataURLtoFile(imgUrl, <span class="string">"img"</span>);</span><br></pre></td></tr></table></figure><h2 id="file转base64"><a href="#file转base64" class="headerlink" title="file转base64"></a>file转base64</h2><p>base64转blob,blob转file<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoBlob</span> (<span class="params">dataurl</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>),</span><br><span class="line">      mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">      bstr = atob(arr[<span class="number">1</span>]),</span><br><span class="line">      n = bstr.length,</span><br><span class="line">      u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">      u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123; <span class="attr">type</span>: mime &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="comment">//将blob转换为file</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blobToFile</span>:(<span class="params">theBlob, fileName</span>)</span>&#123;</span><br><span class="line">  theBlob.lastModifiedDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  theBlob.name = fileName;</span><br><span class="line">  <span class="keyword">return</span> theBlob;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">var</span> blob = dataURLtoBlob(base64Data);</span><br><span class="line"><span class="keyword">var</span> file = blobToFile(blob, imgName);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;base64转file&quot;&gt;&lt;a href=&quot;#base64转file&quot; class=&quot;headerlink&quot; title=&quot;base64转file&quot;&gt;&lt;/a&gt;base64转file&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>export 和 module export</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-6/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-6/</id>
    <published>2019-03-15T07:50:18.000Z</published>
    <updated>2019-03-15T07:50:38.241Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>async await</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-5/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-5/</id>
    <published>2019-03-15T07:32:56.000Z</published>
    <updated>2019-03-15T07:33:17.336Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js es6" scheme="http://huangXin1538.github.io/tags/js-es6/"/>
    
  </entry>
  
  <entry>
    <title>js作用域详解</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-4/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-4/</id>
    <published>2019-03-15T01:45:23.000Z</published>
    <updated>2019-04-02T08:05:50.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>js中全局作用域比较简单，在代码任何地方都有定义。<br>函数的参数和局部变量只在函数内有定义。<br>局部变量优先级高于同名全局变量，当局部变量和全局变量同名，局部变量覆盖全局变量</p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>在变量声明的代码段之外没有定义，成为块级作用域。<br>js中使用的是函数作用域（变量在声明他们的函数体以及这个函数体嵌套的任何函数体都是有定义的）</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>js中函数也是对象，一切都是对象。函数拥有可以通过代码访问的属性和一系列仅供js引擎访问的内部属性。<br>其中一个内部属性是[[scope]]。该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问<br>函数被创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。</p><p>执行函数时，会创建一个称为‘运行期上下文’的内部对象，运行期上下文定义了函数执行的环境。每个运行期上下文都有自己的作用域链，用于标识符解析。<br>当运行期上下文被创建时，它的作用域链接初始化为当前运行函数的[[scope]]所包含的对象。</p><p>这些值，按照出现在函数中的顺序被复制到运行期上下文的作用域中。它们共同组成一个新的对象，叫做‘活动对象’。该对象包含了函数的所有的局部变量，命名参数、参数集合以及this，然后此对象被推入作用域链的前端，当运行期上下文被销毁时，活动对象也随之销毁</p><h2 id="函数解析和执行过程"><a href="#函数解析和执行过程" class="headerlink" title="函数解析和执行过程"></a>函数解析和执行过程</h2><p>a();</p><p>解析：<br>1.代码进入浏览器，因为会有标识符解析，所以在这之前，js解释器需要扫面全局，初始化全局作用域。<br>2.a变量进入全局作用域，a仍是undefined，当解释器自上而下解释到这段代码时,创建一个匿名函数<br>3.将全局作用域压进函数对象的内部属性 所引用的作用域链里[[scope]]<br>4.将匿名对象赋值给a</p><p>执行<br>1.创建内部对象，称为该对象的‘执行期上下文’。定义了一个函数的执行环境，函数每次执行都会创建独一无二的执行期上下文，每个执行期上下文都有自己的作用域链，用来解析标识符。<br>2.当执行期上下文创建时，它的作用域链会被初始化为当前执行的函数对象里的[[scope]]属性中包含的对象<br>3.scope中的值，按照它们原有的顺序被复制到执行期上下文的作用链里<br>4.解析器创建一个称为‘活动对象’的内部对象，活动对象包含当前执行函数里所有的局部变量，命名参数，参数合计以及this。<br>5.活动对象被推入执行期上下文里中作用域链的前端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h2&gt;&lt;p&gt;js中全局作用域比较简单，在代码任何地方都有定义。&lt;br&gt;函数的参数和局部变量只在函数内有定义。&lt;br&gt;局部变量优先
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css 三栏布局以及延伸</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-3/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-3/</id>
    <published>2019-03-15T01:44:33.000Z</published>
    <updated>2019-03-15T01:44:58.935Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css 边距重叠 与 BFC</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-2/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-2/</id>
    <published>2019-03-15T01:43:47.000Z</published>
    <updated>2019-03-15T01:44:16.580Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>call和apply</title>
    <link href="http://huangXin1538.github.io/2019/03/15/20190315-1/"/>
    <id>http://huangXin1538.github.io/2019/03/15/20190315-1/</id>
    <published>2019-03-15T01:42:52.000Z</published>
    <updated>2019-03-29T07:06:34.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>每个Function对象，都带有一个apply()和call()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">apply</span>(<span class="params">thisObj[, argArray]</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span>.<span class="title">call</span>(<span class="params">thisObj[, arg1[, arg2[, [,...argN]]]]</span>);</span></span><br></pre></td></tr></table></figure><p>apply() :调用一个对象的一个方法，用另一个对象替换当前对象。例如，B.apply(A, arguments);</p><p>即A对象应用B对象的方法</p><p>call() : 调用一个对象的一个方法，用另一个对象替换当前对象。 例如，B.call(A, arg1, arg2);</p><p>即A对象调用B对象的方法</p><p>共同之处：都可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为有thisObj指定的新对象。</p><p>不同之处：</p><p>apply：最多只能有两个参数 新this对象和一个数组argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里。如果argArray不是一个有效的数组或arguments对象，那么将导致一个TypeRrror。如果没有提供argArray和thisObj任何一个参数，那么Global对象将被作为thisObj，并且无法传递任何参数</p><p>call： 可以接受多个参数，第一个参数和apply一样，后面是一串参数列表；主要用在js对象各方法互相调用的时候，使当前this指针保持一致，或者在特殊情况下需要改变this指针。如果没有提供thisObj参数，那么Golbal对象被用作thisObj。</p><p>实际上，apply和call功能一样，只是传入的参数列表形式不同。</p><h2 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h2><h3 id="普通继承"><a href="#普通继承" class="headerlink" title="普通继承"></a>普通继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.apply(<span class="keyword">this</span>,[name]);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"咕咕"</span>);</span><br><span class="line">cat.showName();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*call的用法*/</span></span><br><span class="line">Animal.call(<span class="keyword">this</span>,name);</span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.showSub = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a - b);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.showAdd = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a + b);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a.apply(<span class="keyword">this</span>);</span><br><span class="line">  b.apply(<span class="keyword">this</span>);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> c();</span><br><span class="line">c.showSub(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//2</span></span><br><span class="line">c.showAdd(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="apply妙用"><a href="#apply妙用" class="headerlink" title="apply妙用"></a>apply妙用</h2><h3 id="Math-max-Math-min得到数组中最大-小的一项"><a href="#Math-max-Math-min得到数组中最大-小的一项" class="headerlink" title="Math.max/Math.min得到数组中最大/小的一项"></a>Math.max/Math.min得到数组中最大/小的一项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arr);</span><br></pre></td></tr></table></figure><h3 id="Array-prototype-push-可以实现两个数组的合并"><a href="#Array-prototype-push-可以实现两个数组的合并" class="headerlink" title="Array.prototype.push 可以实现两个数组的合并"></a>Array.prototype.push 可以实现两个数组的合并</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;每个Function对象，都带有一个apply()和call()方法&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>object方法</title>
    <link href="http://huangXin1538.github.io/2019/02/28/20190228-1/"/>
    <id>http://huangXin1538.github.io/2019/02/28/20190228-1/</id>
    <published>2019-02-28T04:00:07.000Z</published>
    <updated>2019-03-04T01:55:42.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Object-assign-target-source1-source2-…-合并对象"><a href="#1-Object-assign-target-source1-source2-…-合并对象" class="headerlink" title="1. Object.assign(target,source1,source2,…); 合并对象"></a>1. Object.assign(target,source1,source2,…); 合并对象</h2><p>将源对象的所有可枚举的属性合并到目标对象上。只拷贝源对象的自身属性，不拷贝继承的属性。</p><p>浅拷贝。如果拷贝的某个属性是对象，那么拷贝到的是这个对象的引用。</p><p>只进行值的复制，如果复制的值是个取值函数，那么求值后复制。</p><p>可以处理数组，但会把数组看做对象</p><p>同值属性被覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  x:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  x:<span class="number">1</span>,</span><br><span class="line">  y:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(target,source);</span><br><span class="line"><span class="comment">//target &#123;x:1,y:0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Object-create-prototype-propertiesObject-使用指定的原型对象及其属性去创建一个新的对象"><a href="#2-Object-create-prototype-propertiesObject-使用指定的原型对象及其属性去创建一个新的对象" class="headerlink" title="2.Object.create(prototype,[propertiesObject]); 使用指定的原型对象及其属性去创建一个新的对象"></a>2.Object.create(prototype,[propertiesObject]); 使用指定的原型对象及其属性去创建一个新的对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">  x:<span class="number">0</span>,</span><br><span class="line">  y:<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a,&#123;</span><br><span class="line">  z:&#123;</span><br><span class="line">    writable:<span class="literal">true</span>, <span class="comment">//是否可以采用 数据运算符 进行赋值</span></span><br><span class="line">    configurable:<span class="literal">true</span>,  <span class="comment">//是否可以修改、删除</span></span><br><span class="line">    value: <span class="string">"newAdd"</span> <span class="comment">//值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">输出： b = &#123;<span class="attr">z</span>:<span class="string">'newAdd'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Object-defineProperties-obj-props-直接在一个对象上定义新的属性或修改现有属性，并返回该对象-（批量）"><a href="#3-Object-defineProperties-obj-props-直接在一个对象上定义新的属性或修改现有属性，并返回该对象-（批量）" class="headerlink" title="3.Object.defineProperties(obj,props); 直接在一个对象上定义新的属性或修改现有属性，并返回该对象 （批量）"></a>3.Object.defineProperties(obj,props); 直接在一个对象上定义新的属性或修改现有属性，并返回该对象 （批量）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, </span><br><span class="line">&#123;  </span><br><span class="line">   <span class="string">'property1'</span>: &#123;    </span><br><span class="line">       value: <span class="literal">true</span>,  </span><br><span class="line">        writable: <span class="literal">true</span> </span><br><span class="line">   &#125;,  </span><br><span class="line">  <span class="string">'property2'</span>: &#123;   </span><br><span class="line">     value: <span class="string">'Hello'</span>,</span><br><span class="line">     writable: <span class="literal">false</span>  </span><br><span class="line">  &#125;  <span class="comment">// etc. etc.</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;property1: true, property2: "Hello"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-Object-defineProperty-obj-prop-descriptor-在一个对象上定义一个新属性，或者修改一个对象的现有属性，-并返回这个对象。（单个）"><a href="#4-Object-defineProperty-obj-prop-descriptor-在一个对象上定义一个新属性，或者修改一个对象的现有属性，-并返回这个对象。（单个）" class="headerlink" title="4.Object.defineProperty(obj,prop,descriptor); 在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。（单个）"></a>4.Object.defineProperty(obj,prop,descriptor); 在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。（单个）</h2><p>obj：必需。目标对象<br>prop：必需。需定义或修改的属性的名字<br>descriptor：必需。目标属性所拥有的特性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Object</span> = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>, <span class="string">'is'</span>, </span><br><span class="line">&#123;  </span><br><span class="line">     value: <span class="number">2</span>,  </span><br><span class="line">     configurable: <span class="literal">true</span>,  <span class="comment">// 是否可以删除或者再次修改属性</span></span><br><span class="line">     enumerable: <span class="literal">false</span>,  <span class="comment">//是否可以被枚举</span></span><br><span class="line">     writable: <span class="literal">true</span>   <span class="comment">//  是否可以被重写</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// Object = &#123;is:2&#125;</span></span><br><span class="line"><span class="comment">// 注意不能同时设置(writable，value) 和 get，set方法，否则浏览器会报错  </span></span><br><span class="line"><span class="comment">// 如果不设置属性特性。configurable、enumerable、writable 都默认为false</span></span><br><span class="line"><span class="comment">//Invalid property descriptor.  Cannot both specify accessors and a value or writable attribute</span></span><br></pre></td></tr></table></figure></p><p>getter/setter<br>当设置或获取对象的某个属性的值的时候，可以提供getter/setter方法。</p><p>getter 是一种获得属性值的方法<br>setter是一种设置属性值的方法。</p><p>可在获取值和设置值的时候触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> initValue = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function ()&#123;</span><br><span class="line">        <span class="comment">//当获取值的时候触发的函数</span></span><br><span class="line">        <span class="keyword">return</span> initValue;    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function (value)&#123;</span><br><span class="line">        <span class="comment">//当设置值的时候触发的函数,设置的新值通过参数value拿到</span></span><br><span class="line">        initValue = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey );  <span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">obj.newKey = <span class="string">'change value'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey ); <span class="comment">//change value</span></span><br></pre></td></tr></table></figure><h2 id="5-Object-keys-返回一个由一个给定对象的自身可枚举属性组成的数组-顺序与for…in获取的相同，但是for-i还会魅族其原型链的属性"><a href="#5-Object-keys-返回一个由一个给定对象的自身可枚举属性组成的数组-顺序与for…in获取的相同，但是for-i还会魅族其原型链的属性" class="headerlink" title="5.Object.keys(); 返回一个由一个给定对象的自身可枚举属性组成的数组,顺序与for…in获取的相同，但是for..i还会魅族其原型链的属性"></a>5.Object.keys(); 返回一个由一个给定对象的自身可枚举属性组成的数组,顺序与for…in获取的相同，但是for..i还会魅族其原型链的属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr));<span class="comment">// ['0', '1', '2']/* Object 对象 */</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;, keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="built_in">console</span>.log(keys);<span class="comment">// ["foo","baz"]</span></span><br></pre></td></tr></table></figure><h2 id="6-Object-values-方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同-区别在于-for-in-循环枚举原型链中的属性-。Object-values会过滤属性名为-Symbol-值的属性。"><a href="#6-Object-values-方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同-区别在于-for-in-循环枚举原型链中的属性-。Object-values会过滤属性名为-Symbol-值的属性。" class="headerlink" title="6.Object.values(); 方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。Object.values会过滤属性名为 Symbol 值的属性。"></a>6.Object.values(); 方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。Object.values会过滤属性名为 Symbol 值的属性。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> an_obj = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(an_obj)); <span class="comment">// ['b', 'c', 'a']</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h2 id="7-Object-entries-返回一个给定对象自身可枚举属性的键值对数组，其排列与使用-for…in-循环遍历该对象时返回的顺序一致（区别在于-for-in-循环也枚举原型链中的属性）。"><a href="#7-Object-entries-返回一个给定对象自身可枚举属性的键值对数组，其排列与使用-for…in-循环遍历该对象时返回的顺序一致（区别在于-for-in-循环也枚举原型链中的属性）。" class="headerlink" title="7.Object.entries(); 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。"></a>7.Object.entries(); 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ ['foo', 'bar'], ['baz', 42] ]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> simuArray = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(simuArray)); <span class="comment">// [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]</span></span><br></pre></td></tr></table></figure><h2 id="8-hasOwnProperty"><a href="#8-hasOwnProperty" class="headerlink" title="8.hasOwnProperty()"></a>8.hasOwnProperty()</h2><p>判断对象自身属性中是否具有指定的属性。</p><p>obj.hasOwnProperty(‘name’)</p><h2 id="9-Object-getOwnPropertyDescriptor-obj-prop-返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）-如果指定的属性存在于对象上，则返回其属性描述符对象（property-descriptor），否则返回-undefined。"><a href="#9-Object-getOwnPropertyDescriptor-obj-prop-返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）-如果指定的属性存在于对象上，则返回其属性描述符对象（property-descriptor），否则返回-undefined。" class="headerlink" title="9.Object.getOwnPropertyDescriptor(obj,prop);返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）.如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。"></a>9.Object.getOwnPropertyDescriptor(obj,prop);返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）.如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'name'</span>,<span class="string">'age'</span>] ;</span><br><span class="line">arr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,val)))</span><br><span class="line"><span class="comment">// &#123;value: "js", writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="10-Object-getOwnPropertyDescriptors-obj-获取一个对象的所有自身属性的描述符。"><a href="#10-Object-getOwnPropertyDescriptors-obj-获取一个对象的所有自身属性的描述符。" class="headerlink" title="10.  Object.getOwnPropertyDescriptors(obj)  获取一个对象的所有自身属性的描述符。"></a>10.  Object.getOwnPropertyDescriptors(obj)  获取一个对象的所有自身属性的描述符。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'js'</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(obj))</span><br></pre></td></tr></table></figure><h2 id="11-Object-getOwnPropertyNames-返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。"><a href="#11-Object-getOwnPropertyNames-返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。" class="headerlink" title="11. Object.getOwnPropertyNames(); 返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。"></a>11. Object.getOwnPropertyNames(); 返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">"a"</span>, <span class="number">1</span>: <span class="string">"b"</span>, <span class="number">2</span>: <span class="string">"c"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'z'</span>,&#123;</span><br><span class="line">    enumerable : <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj))  <span class="comment">// ["x", "y", "z"] 包含不可枚举属性 。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))                 <span class="comment">// ["x", "y"]      只包含可枚举属性 。</span></span><br></pre></td></tr></table></figure><h2 id="12-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。"><a href="#12-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。" class="headerlink" title="12 Object.getOwnPropertySymbols();返回一个给定对象自身的所有 Symbol 属性的数组。"></a>12 Object.getOwnPropertySymbols();返回一个给定对象自身的所有 Symbol 属性的数组。</h2><h2 id="13-isPrototypeOf-判断一个对象是否存在一另一个对象的原型链上"><a href="#13-isPrototypeOf-判断一个对象是否存在一另一个对象的原型链上" class="headerlink" title="13 isPrototypeOf(); 判断一个对象是否存在一另一个对象的原型链上"></a>13 isPrototypeOf(); 判断一个对象是否存在一另一个对象的原型链上</h2><h2 id="14-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。"><a href="#14-Object-getOwnPropertySymbols-返回一个给定对象自身的所有-Symbol-属性的数组。" class="headerlink" title="14 Object.getOwnPropertySymbols(); 返回一个给定对象自身的所有 Symbol 属性的数组。"></a>14 Object.getOwnPropertySymbols(); 返回一个给定对象自身的所有 Symbol 属性的数组。</h2><h2 id="15-Object-is-判断两个对象是否相同"><a href="#15-Object-is-判断两个对象是否相同" class="headerlink" title="15 Object.is(); 判断两个对象是否相同"></a>15 Object.is(); 判断两个对象是否相同</h2><p>如果下列任何一项成立，则返回true<br>两个值都是 undefined<br>两个值都是 null<br>两个值都是 true 或者都是 false<br>两个值是由相同个数的字符按照相同的顺序组成的字符串<br>两个值指向同一个对象<br>两个值都是数字并且<br>都是正零 +0<br>都是负零 -0<br>都是 NaN<br>都是除零和 NaN 外的其它同一个数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="built_in">window</span>, <span class="built_in">window</span>);   <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'bar'</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is([], []);           <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> test = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.is(test, test);       <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">null</span>);       <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 特例</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>, <span class="number">-0</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="number">0</span>/<span class="number">0</span>);         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="16-Object-freeze-冻结一个对象。被冻结的对象-是永远不变的，返回被冻结的对象"><a href="#16-Object-freeze-冻结一个对象。被冻结的对象-是永远不变的，返回被冻结的对象" class="headerlink" title="16 Object.freeze() 冻结一个对象。被冻结的对象 是永远不变的，返回被冻结的对象"></a>16 Object.freeze() 冻结一个对象。被冻结的对象 是永远不变的，返回被冻结的对象</h2><h2 id="17-Object-isFrozen-判断一个对象是否被冻结"><a href="#17-Object-isFrozen-判断一个对象是否被冻结" class="headerlink" title="17 Object.isFrozen() 判断一个对象是否被冻结 ."></a>17 Object.isFrozen() 判断一个对象是否被冻结 .</h2><h2 id="18-Object-preventExtensions-对象不能再添加新的属性。可修改，删除现有属性"><a href="#18-Object-preventExtensions-对象不能再添加新的属性。可修改，删除现有属性" class="headerlink" title="18 Object.preventExtensions()  对象不能再添加新的属性。可修改，删除现有属性"></a>18 Object.preventExtensions()  对象不能再添加新的属性。可修改，删除现有属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name :<span class="string">'lilei'</span>,</span><br><span class="line">    age : <span class="number">30</span> ,</span><br><span class="line">    sex : <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">obj = <span class="built_in">Object</span>.preventExtensions(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj);    <span class="comment">// &#123;name: "lilei", age: 30, sex: "male"&#125;</span></span><br><span class="line">obj.name = <span class="string">'haha'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj)     <span class="comment">// &#123;name: "haha", age: 30, sex: "male"&#125;</span></span><br><span class="line"><span class="keyword">delete</span> obj.sex ;</span><br><span class="line"><span class="built_in">console</span>.log(obj);    <span class="comment">// &#123;name: "haha", age: 30&#125;</span></span><br><span class="line">obj.address  = <span class="string">'china'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj)     <span class="comment">// &#123;name: "haha", age: 30&#125;</span></span><br></pre></td></tr></table></figure><h2 id="19-Object-isExtensible-判断对象是否是可扩展的，Object-preventExtensions，Object-seal-或-Object-freeze-方法都可以标记一个对象为不可扩展（non-extensible）"><a href="#19-Object-isExtensible-判断对象是否是可扩展的，Object-preventExtensions，Object-seal-或-Object-freeze-方法都可以标记一个对象为不可扩展（non-extensible）" class="headerlink" title="19 Object.isExtensible() 判断对象是否是可扩展的，Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）"></a>19 Object.isExtensible() 判断对象是否是可扩展的，Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）</h2><h2 id="20-Object-seal-让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError-异常-不会影响从原型链上继承的属性。但-proto-属性的值也会不能修改。"><a href="#20-Object-seal-让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError-异常-不会影响从原型链上继承的属性。但-proto-属性的值也会不能修改。" class="headerlink" title="20 Object.seal() 让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常. 不会影响从原型链上继承的属性。但 proto (  ) 属性的值也会不能修改。"></a>20 Object.seal() 让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常. 不会影响从原型链上继承的属性。但 <strong>proto</strong> (  ) 属性的值也会不能修改。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    prop: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    foo: <span class="string">"bar"</span></span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 可以添加新的属性,已有属性的值可以修改,可以删除</span></span><br><span class="line">obj.foo = <span class="string">"baz"</span>;</span><br><span class="line">obj.lumpy = <span class="string">"woof"</span>;</span><br><span class="line"><span class="keyword">delete</span> obj.prop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.seal(obj);</span><br><span class="line"> </span><br><span class="line">assert(o === obj);</span><br><span class="line">assert(<span class="built_in">Object</span>.isSealed(obj) === <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 仍然可以修改密封对象上的属性的值.</span></span><br><span class="line">obj.foo = <span class="string">"quux"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 但你不能把一个数据属性重定义成访问器属性.</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"foo"</span>, &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"g"</span>; &#125; &#125;); <span class="comment">// 抛出TypeError异常</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 现在,任何属性值以外的修改操作都会失败.</span></span><br><span class="line">obj.quaxxor = <span class="string">"the friendly duck"</span>; <span class="comment">// 静默失败,新属性没有成功添加</span></span><br><span class="line"><span class="keyword">delete</span> obj.foo; <span class="comment">// 静默失败,属性没有删除成功</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// ...在严格模式中,会抛出TypeError异常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">delete</span> obj.foo; <span class="comment">// 抛出TypeError异常</span></span><br><span class="line">  obj.sparky = <span class="string">"arf"</span>; <span class="comment">// 抛出TypeError异常</span></span><br><span class="line">&#125;</span><br><span class="line">fail();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用Object.defineProperty方法同样会抛出异常</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"ohai"</span>, &#123; <span class="attr">value</span>: <span class="number">17</span> &#125;); <span class="comment">// 抛出TypeError异常</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"foo"</span>, &#123; <span class="attr">value</span>: <span class="string">"eit"</span> &#125;); <span class="comment">// 成功将原有值改变</span></span><br></pre></td></tr></table></figure><h2 id="21-Object-isSealed-判断一个对象是否密闭"><a href="#21-Object-isSealed-判断一个对象是否密闭" class="headerlink" title="21.Object.isSealed() 判断一个对象是否密闭"></a>21.Object.isSealed() 判断一个对象是否密闭</h2><h2 id="Object状态"><a href="#Object状态" class="headerlink" title="Object状态:"></a>Object状态:</h2><p>1.冻结。永远不会变<br>2.密闭。<br>  a:不可添加新属性<br>  b:已有属性变的不可删除<br>  c:数据的属性不能被重新定义为转换器属性<br>  d:属性值仍然可以修改<br>  e:尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常. 不会影响从原型链上继承的属性<br>  f:<strong>proto</strong> (  ) 属性的值也会不能修改<br>3.不可扩展：对象不能再添加新的属性。可修改，删除现有属性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Object-assign-target-source1-source2-…-合并对象&quot;&gt;&lt;a href=&quot;#1-Object-assign-target-source1-source2-…-合并对象&quot; class=&quot;headerlink&quot; title=&quot;1.
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue首屏加载时间过长优化</title>
    <link href="http://huangXin1538.github.io/2019/02/21/20190221-1/"/>
    <id>http://huangXin1538.github.io/2019/02/21/20190221-1/</id>
    <published>2019-02-21T06:53:13.000Z</published>
    <updated>2019-03-04T01:55:32.893Z</updated>
    
    <content type="html"><![CDATA[<p>主要思路：减小首屏加载的js文件体积</p><h2 id="1-减少不必要的引用"><a href="#1-减少不必要的引用" class="headerlink" title="1.减少不必要的引用"></a>1.减少不必要的引用</h2><p>1.看package.json;<br>2.查看打包分析<br>  安装 webpack-bundle-analyzer<br>  vue.config.js配置<br>  chainWebpack: (config) =&gt; {  //打包分析<br>    config.plugin(‘webpack-bundle-analyzer’)<br>      .use(BundleAnalyzerPlugin)<br>        .init(Plugin =&gt; new Plugin());<br>  },<br>  run build –report</p><h2 id="2-路由懒加载，组件懒加载"><a href="#2-路由懒加载，组件懒加载" class="headerlink" title="2.路由懒加载，组件懒加载"></a>2.路由懒加载，组件懒加载</h2><h2 id="3-引用转为cdn"><a href="#3-引用转为cdn" class="headerlink" title="3.引用转为cdn"></a>3.引用转为cdn</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要思路：减小首屏加载的js文件体积&lt;/p&gt;
&lt;h2 id=&quot;1-减少不必要的引用&quot;&gt;&lt;a href=&quot;#1-减少不必要的引用&quot; class=&quot;headerlink&quot; title=&quot;1.减少不必要的引用&quot;&gt;&lt;/a&gt;1.减少不必要的引用&lt;/h2&gt;&lt;p&gt;1.看package.j
      
    
    </summary>
    
    
      <category term="vue" scheme="http://huangXin1538.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>flex兼容</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-12/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-12/</id>
    <published>2019-01-30T09:49:51.000Z</published>
    <updated>2019-03-04T01:55:29.444Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>旧版本dispaly: box;，过渡版本dispaly: flex box;，以及现在的标准版本display: flex</p><p>Android<br>2.3 开始就支持旧版本 display:-webkit-box;<br>4.4 开始支持标准版本 display: flex;</p><p>IOS<br>6.1 开始支持旧版本 display:-webkit-box;<br>7.1 开始支持标准版本display: flex;</p><p>PC<br>ie10开始支持，但是IE10的是-ms形式的。</p><p>###</p><p>###<br>写法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box; <span class="comment">/* 老版本语法: Safari, iOS, Android browser, older WebKit browsers. */</span></span><br><span class="line">  <span class="attribute">display</span>: -moz-box; <span class="comment">/* 老版本语法: Firefox (buggy) */</span></span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox; <span class="comment">/* 混合版本语法: IE 10 */</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* 新版本语法: Chrome 21+ */</span></span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* 新版本语法: Opera 12.1, Firefox 22+ */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-1</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: <span class="number">1</span>; <span class="comment">/* Chrome */</span></span><br><span class="line">  <span class="attribute">-ms-flex</span>: <span class="number">1</span>; <span class="comment">/* IE 10 */</span></span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* NEW, Spec - Opera 12.1, Firefox 20+ */</span></span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>; <span class="comment">/* OLD - iOS 6-, Safari 3.1-6 */</span></span><br><span class="line">  <span class="attribute">-moz-box-flex</span>: <span class="number">1</span>; <span class="comment">/* OLD - Firefox 19- */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-v</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">-ms-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-align-center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-pack-center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-pack-justify</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: justify;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-pack-around</span> &#123;</span><br><span class="line">　　<span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">　　<span class="attribute">-webkit-justify-content</span>: space-around;</span><br><span class="line">　　<span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">　　<span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性：ios 4+、android 2.3+、winphone8+</p><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;旧版本dispaly: box;，过渡版本dispaly: flex box;，以及现在的标准版本display: flex&lt;/p&gt;
&lt;p&gt;Android&lt;br&gt;2.3 开始就支持旧版本 display:-webkit-box;&lt;br&gt;4.4 开始支持标准版本
      
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js实现面向对象</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-11/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-11/</id>
    <published>2019-01-30T09:49:48.000Z</published>
    <updated>2019-03-04T01:55:24.777Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>面向对象：将抽象模型实例化为对象，属性和方法都通过操作对象来获取和实现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">color,name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color:color,</span><br><span class="line">  <span class="keyword">this</span>.name:name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'黄色'</span>,<span class="string">'大毛'</span>);</span><br></pre></td></tr></table></figure></p><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;面向对象：将抽象模型实例化为对象，属性和方法都通过操作对象来获取和实现。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
    
      <category term="js" scheme="http://huangXin1538.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css单位</title>
    <link href="http://huangXin1538.github.io/2019/01/30/20190130-10/"/>
    <id>http://huangXin1538.github.io/2019/01/30/20190130-10/</id>
    <published>2019-01-30T09:49:44.000Z</published>
    <updated>2019-03-04T01:55:21.311Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>%:百分比<br>cm：厘米<br>mm：毫米<br>px:像素<br>in：英寸</p><p>rgb(x,x,x)    RGB 值 (比如 rgb(255,0,0))<br>rgb(x%, x%, x%)    RGB 百分比值 (比如 rgb(100%,0%,0%))</p><p>#rrggbb    十六进制数 (比如 #ff0000)</p><p>新属性<br>vw：视窗宽度的百分比（1vw 代表视窗的宽度为 1%）<br>vh：视窗高度的百分比<br>vmin：当前 vw 和 vh 中较小的一个值<br>vmax：当前 vw 和 vh 中较大的一个值</p><p>做移动页面开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。<br>由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。</p><p>Android：自 4.4 版起就完美支持（2013年12月）<br>iOS：自 iOS8 版起就完美支持（2014年9月）</p><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;%:百分比&lt;br&gt;cm：厘米&lt;br&gt;mm：毫米&lt;br&gt;px:像素&lt;br&gt;in：英寸&lt;/p&gt;
&lt;p&gt;rgb(x,x,x)    RGB 值 (比如 rgb(255,0,0))&lt;br&gt;rgb(x%, x%, x%)    RGB 百分比值 (比如 rgb(100%
      
    
    </summary>
    
    
      <category term="css" scheme="http://huangXin1538.github.io/tags/css/"/>
    
  </entry>
  
</feed>
